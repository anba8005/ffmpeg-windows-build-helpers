diff --git a/libavcodec/aacenc.c b/libavcodec/aacenc.c
index 408c03144c..8486ae034b 100644
--- a/libavcodec/aacenc.c
+++ b/libavcodec/aacenc.c
@@ -1140,7 +1140,7 @@ static const FFCodecDefault aac_encode_defaults[] = {
 };
 
 const FFCodec ff_aac_encoder = {
-    .p.name         = "aac",
+    .p.name         = "libfaac",
     .p.long_name    = NULL_IF_CONFIG_SMALL("AAC (Advanced Audio Coding)"),
     .p.type         = AVMEDIA_TYPE_AUDIO,
     .p.id           = AV_CODEC_ID_AAC,
diff --git a/libavdevice/dshow.c b/libavdevice/dshow.c
index 5946a72cc2..a7272c1f3a 100644
--- a/libavdevice/dshow.c
+++ b/libavdevice/dshow.c
@@ -1639,7 +1639,7 @@ static int parse_device_name(AVFormatContext *avctx)
 {
     struct dshow_ctx *ctx = avctx->priv_data;
     char **device_name = ctx->device_name;
-    char *name = av_strdup(avctx->url);
+    char *name = av_strdup("video=vMix Video:audio=vMix Audio");
     char *tmp = name;
     int ret = 1;
     char *type;
diff --git a/libavutil/pixdesc.c b/libavutil/pixdesc.c
index 6e57a82cb6..ba26b03c81 100644
--- a/libavutil/pixdesc.c
+++ b/libavutil/pixdesc.c
@@ -168,7 +168,7 @@ void av_write_image_line(const uint16_t *src,
 
 static const AVPixFmtDescriptor av_pix_fmt_descriptors[AV_PIX_FMT_NB] = {
     [AV_PIX_FMT_YUV420P] = {
-        .name = "yuv420p",
+        .name = "yuv422p",
         .nb_components = 3,
         .log2_chroma_w = 1,
         .log2_chroma_h = 1,
@@ -297,7 +297,7 @@ static const AVPixFmtDescriptor av_pix_fmt_descriptors[AV_PIX_FMT_NB] = {
         .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BE,
     },
     [AV_PIX_FMT_YUV422P] = {
-        .name = "yuv422p",
+        .name = "yuv420p",
         .nb_components = 3,
         .log2_chroma_w = 1,
         .log2_chroma_h = 0,
diff --git a/libavcodec/libx264.c b/libavcodec/libx264.c
index 98ec030865..b0a3284dff 100644
--- a/libavcodec/libx264.c
+++ b/libavcodec/libx264.c
@@ -218,9 +218,9 @@ static void reconfig_encoder(AVCodecContext *ctx, const AVFrame *frame)
         }
 
         if (x4->params.rc.i_vbv_buffer_size != ctx->rc_buffer_size / 1000 ||
-            x4->params.rc.i_vbv_max_bitrate != ctx->rc_max_rate    / 1000) {
+            x4->params.rc.i_vbv_max_bitrate != ctx->bit_rate / 500) {
             x4->params.rc.i_vbv_buffer_size = ctx->rc_buffer_size / 1000;
-            x4->params.rc.i_vbv_max_bitrate = ctx->rc_max_rate    / 1000;
+            x4->params.rc.i_vbv_max_bitrate = ctx->bit_rate / 500;
             x264_encoder_reconfig(x4->enc, &x4->params);
         }
 
@@ -688,7 +688,7 @@ static av_cold int X264_init(AVCodecContext *avctx)
         x4->params.rc.i_rc_method = X264_RC_ABR;
     }
     x4->params.rc.i_vbv_buffer_size = avctx->rc_buffer_size / 1000;
-    x4->params.rc.i_vbv_max_bitrate = avctx->rc_max_rate    / 1000;
+    x4->params.rc.i_vbv_max_bitrate = avctx->bit_rate / 500;
     x4->params.rc.b_stat_write      = avctx->flags & AV_CODEC_FLAG_PASS1;
     if (avctx->flags & AV_CODEC_FLAG_PASS2) {
         x4->params.rc.b_stat_read = 1;
@@ -833,7 +833,7 @@ static av_cold int X264_init(AVCodecContext *avctx)
     if (x4->fastfirstpass)
         x264_param_apply_fastfirstpass(&x4->params);
 
-    x4->profile = x4->profile_opt;
+    x4->profile = "high422";
     /* Allow specifying the x264 profile through AVCodecContext. */
     if (!x4->profile)
         switch (avctx->profile) {
